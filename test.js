// Set up the scene, camera, and renderer
const scene = new THREE.Scene();
const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
const renderer = new THREE.WebGLRenderer();
renderer.setSize(window.innerWidth, window.innerHeight);
document.body.appendChild(renderer.domElement);

// Add ambient light (soft, all-directional light)
const ambientLight = new THREE.AmbientLight(0x404040, 1); // Color and intensity
scene.add(ambientLight);

// Add directional light (stronger light from a specific direction)
const directionalLight = new THREE.DirectionalLight(0xffffff, 1); // Color and intensity
directionalLight.position.set(5, 5, 10); // Position the light above and to the side
scene.add(directionalLight);

// Variables to store both extruded meshes for rotation
let extrudedMesh1, extrudedMesh2;
const pitchRadius = 5;

// Function to instantiate and add an extruded mesh to the scene
function extrudeAndAddToScene(outline, inline, teeth, extrusionDepth, offsetX = 0, col) {
    const extruder = new Extrude();
    
    // Call extrudeShape to create the extrusion from outline, inline, and teeth
    extruder.extrudeShape(outline, inline, teeth, extrusionDepth);
    
    // Get the mesh generated by the extruder
    const extrudedMesh = extruder.getMesh(col);

    // Position the mesh with an offset if provided
    extrudedMesh.position.x = offsetX;

    // Add the mesh to the scene
    scene.add(extrudedMesh);
    return extrudedMesh; // Return the mesh to store in a variable
}

let outline, inline, teeth;
// Test function to generate the gear shape
function test() {
     outline = [];
     inline = [];
     teeth = [];
    const numTeeth = 4;
    const pressureAngle = 20 * Math.PI / 180;
    const module = 1;

    const gear = new Gear(module, numTeeth, pressureAngle);
    const extrusionDepth = 2;
    extrudedMesh1 = extrudeAndAddToScene(gear.outline, gear.inline, gear.teeth, extrusionDepth,0, 0x0077ff);

    // Extrude and add the second gear, offset to the right by the pitchRadius * 2
    extrudedMesh2 = extrudeAndAddToScene(gear.outline, gear.inline, gear.teeth, extrusionDepth, pitchRadius * 2, 0x00ff88);
}

function see(outline, col) {
    const points = outline.map(p => new THREE.Vector2(p.x, p.y));

    // Create a shape from the points
    const shape = new THREE.Shape(points);

    // Create geometry from shape
    const geometry = new THREE.BufferGeometry().setFromPoints(points);

    // Create a line material
    const lineMaterial = new THREE.LineBasicMaterial({ color: col });

    // Create the line and add it to the scene
    const line = new THREE.Line(geometry, lineMaterial);
    scene.add(line);
};

// Run the test function to add the extruded shapes to the scene
test();
//see(outline, 0xff0000);
//see(inline, 0xff00);
//see(teeth[0], 0xff);

// Position the camera to view both shapes
camera.position.set(15, 15, 20); // Adjusted to see both objects
camera.lookAt(0, 0, 0); // Point the camera at the center of the scene

// Animation loop to render the scene
function animate() {
    requestAnimationFrame(animate);
    
    // Rotate both extruded meshes if they exist
    if (extrudedMesh1 && extrudedMesh2) {
        extrudedMesh1.rotation.z += 0.01; // Rotate around z-axis
        extrudedMesh2.rotation.z -= 0.01; // Rotate around z-axis
        //camera.rotation.z+=.05;
    }

    renderer.render(scene, camera);
}

// Start the animation loop
animate();
