// Set up the scene, camera, and renderer
const scene = new THREE.Scene();
const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
const renderer = new THREE.WebGLRenderer();
renderer.setSize(window.innerWidth, window.innerHeight);
document.body.appendChild(renderer.domElement);
let zoom = 50;         // Initial zoom (distance from the scene along Z-axis)
let panX = 0;          // Horizontal pan
let panY = 0;          // Vertical pan
let rotationY = 0;     // Rotation around the Y-axis


// Add ambient light (soft, all-directional light)
const ambientLight = new THREE.AmbientLight(0x404040, 1); // Color and intensity
scene.add(ambientLight);

// Add directional light (stronger light from a specific direction)
const directionalLight = new THREE.DirectionalLight(0xffffff, 1); // Color and intensity
directionalLight.position.set(5, 5, 10); // Position the light above and to the side
scene.add(directionalLight);

// Variables to store both extruded meshes for rotation
let mesh1 = null, mesh2 = null, mesh3 = null, mesh4 = null, mesh5 = null, mesh6=null;
const pitchRadius = 5;

// Function to instantiate and add an extruded mesh to the scene
function extrudeAndAddToScene(shape, extrusionDepth, offsetX = 0, color) {
    const extruder = new Extrude(shape, extrusionDepth);
    
    // Get the mesh generated by the extruder
    const mesh = extruder.getMesh(color);

    // Position the mesh with an offset if provided
    mesh.position.x = offsetX;

    // Add the mesh to the scene
    scene.add(mesh);
    return mesh; // Return the mesh to store in a variable
}

let outline, faces, teeth;
// Test function to generate the gear shape
let lastNumTeeth = 0;
let lastShift = 0;
let lastEccentricity = 0;
let egear2;
function build(numberOfTeeth = 4, shift = 0, eccentricity = 0) {
    if (numberOfTeeth === lastNumTeeth && shift === lastShift && eccentricity === lastEccentricity) {
        return;
    };

    lastNumTeeth = numberOfTeeth;
    lastShift = shift;
    lastEccentricity = eccentricity;

    const pressureAngle = 20 * Math.PI / 180;
    const module = 1;
    const extrusionDepth = 2;

    const gear = new SimpleGear2D(module, numberOfTeeth, pressureAngle, shift);
    gear.slot(2, 1, 2.5);
    scene.remove(mesh1);
    mesh1 = extrudeAndAddToScene(gear, extrusionDepth,shift, 0x0077ff);

    // Extrude and add the second gear, offset to the right by the pitchRadius * 2
    scene.remove(mesh2);
    mesh2 = extrudeAndAddToScene(gear, extrusionDepth, gear.Rpitch * 2, 0x00ff88);

    const pgear = new PlanetaryGear2D(module, numberOfTeeth, pressureAngle,shift);
    scene.remove(mesh3);
    mesh3 = extrudeAndAddToScene(pgear, extrusionDepth,0, 0xff77ff);
    mesh3.position.z = 5;

    const egear = new EllipticalGear2D(module, numberOfTeeth, pressureAngle, shift, eccentricity);
    egear.slot(2, 1, 2.5);
    scene.remove(mesh4);
    mesh4 = extrudeAndAddToScene(egear, extrusionDepth, -(egear.A+egear.B)/2, 0xffffff);
    mesh4.position.z = 10;

    egear2 = new EllipticalGear2D(module, numberOfTeeth, pressureAngle, shift + .5, eccentricity);
    egear2.slot(2, 1, 2.5,egear.NumberOfTeeth/4);
    scene.remove(mesh5);
    mesh5 = extrudeAndAddToScene(egear2, extrusionDepth, (egear.A + egear.B) / 2, 0xffff00);
    mesh5.position.z = 10;
    mesh5.rotation.z = Math.PI/2;

    var frameRadius = Math.max(5, gear.Rdedendum * .7);
    const fgear = new FrameGear2D(module, numberOfTeeth, pressureAngle, shift,frameRadius,4,0,1);
    scene.remove(mesh6);
    mesh6 = extrudeAndAddToScene(fgear, extrusionDepth, shift, 0x0077ff);
    mesh6.position.z = 15;

}


// Position the camera to view both shapes
camera.position.set(15, 15, 20); // Adjusted to see both objects
camera.lookAt(0, 0, 0); // Point the camera at the center of the scene

const slider1 = document.getElementById('mySlider1');
const sliderValueDisplay1 = document.getElementById('sliderValue1');
const slider2 = document.getElementById('mySlider2');
const sliderValueDisplay2 = document.getElementById('sliderValue2');
const slider3 = document.getElementById('mySlider3');
const sliderValueDisplay3 = document.getElementById('sliderValue3');
const slider4 = document.getElementById('mySlider4');
const sliderValueDisplay4 = document.getElementById('sliderValue4');
const slider5 = document.getElementById('mySlider5');
const sliderValueDisplay5 = document.getElementById('sliderValue5');
const slider6 = document.getElementById('mySlider6');
const sliderValueDisplay6 = document.getElementById('sliderValue6');
const sliderB1 = document.getElementById('mySliderB1');
const sliderValueDisplayB1 = document.getElementById('sliderValueB1');
const sliderB2 = document.getElementById('mySliderB2');
const sliderValueDisplayB2 = document.getElementById('sliderValueB2');
const sliderB3 = document.getElementById('mySliderB3');
const sliderValueDisplayB3 = document.getElementById('sliderValueB3');
const sliderB4 = document.getElementById('mySliderB4');
const sliderValueDisplayB4 = document.getElementById('sliderValueB4');
const sliderB5 = document.getElementById('mySliderB5');
const sliderValueDisplayB5 = document.getElementById('sliderValueB5');
const sliderB6 = document.getElementById('mySliderB6');
const sliderValueDisplayB6 = document.getElementById('sliderValueB6');

// Animation loop to render the scene
function animate() {
    requestAnimationFrame(animate);
    check_sliders();
    root_object.animate();
}
 
// Start the animation loop
animate();
